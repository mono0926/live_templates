<templateSet group="Dart">
  <template name="todo" value="// TODO(mono): " description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="firdoc" value="import 'package:firestore_ref/firestore_ref.dart';&#10;&#10;import '$NAME_SNAKE$.dart';&#10;&#10;class $NAME$Doc extends Document&lt;$NAME$&gt; {&#10;  const $NAME$Doc(&#10;    String id,&#10;    $NAME$ entity,&#10;  ) : super(&#10;          id,&#10;          entity,&#10;        );&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_SNAKE" expression="snakeCase(NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="firref" value="import 'package:firestore_ref/firestore_ref.dart';&#10;import 'package:meta/meta.dart';&#10;&#10;import '$NAME_SNAKE$.dart';&#10;import '$NAME_SNAKE$_doc.dart';&#10;&#10;class $NAME$Ref extends DocumentRef&lt;$NAME$, $NAME$Doc&gt; {&#10;  const $NAME$Ref({&#10;    @required DocumentReference ref,&#10;    @required DocumentDecoder&lt;$NAME$Doc&gt; decoder,&#10;    @required EntityEncoder&lt;$NAME$&gt; encoder,&#10;  }) : super(&#10;          ref: ref,&#10;          decoder: decoder,&#10;          encoder: encoder,&#10;        );&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_SNAKE" expression="snakeCase(NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="firrefs" value="import 'package:firestore_ref/firestore_ref.dart';&#10;&#10;import '$NAME_SNAKE$.dart';&#10;import '$NAME_SNAKE$_doc.dart';&#10;import '$NAME_SNAKE$_ref.dart';&#10;&#10;export '$NAME_SNAKE$_ref.dart';&#10;&#10;class $NAME$sRef extends CollectionRef&lt;$NAME$, $NAME$Doc&gt; {&#10;  $NAME$sRef.ref() : super(&#10;    ref: firestoreInstance.collection(collection),&#10;    decoder: _$NAME$DocDecoder(),&#10;    encoder: _$NAME$Encoder(),&#10;  );&#10;&#10;  static const collection = '$NAME_CAMEL$s';&#10;&#10;  @override&#10;  $NAME$Ref docRef([String id]) {&#10;    return $NAME$Ref(&#10;      ref: docRefRaw(id),&#10;      encoder: encoder,&#10;      decoder: decoder,&#10;    );&#10;  }&#10;}&#10;&#10;class _$NAME$DocDecoder extends DocumentDecoder&lt;$NAME$Doc&gt; {&#10;  @override&#10;  $NAME$Doc decode(DocumentSnapshot snapshot) {&#10;    return $NAME$Doc(&#10;      snapshot.documentID,&#10;      $NAME$.fromJson(getSnapshotData(snapshot)),&#10;    );&#10;  }&#10;}&#10;&#10;class _$NAME$Encoder extends EntityEncoder&lt;$NAME$&gt; {&#10;  @override&#10;  Map&lt;String, dynamic&gt; encode($NAME$ entity) =&gt; entity.toJson();&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_SNAKE" expression="snakeCase(NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="NAME_CAMEL" expression="camelCase(NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="frzpartfrz" value="part '$FILENAME$.freezed.dart';" description="Part 'Freezed' statement" toReformat="false" toShortenFQNames="true">
    <variable name="FILENAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="frzpartg" value="part '$FILENAME$.g.dart';" description="Creates a filled-in part statement" toReformat="false" toShortenFQNames="true">
    <variable name="FILENAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="frzclass" value="@freezed&#10;abstract class $DataClass$ with _$$$DataClass$ {&#10;  const factory $DataClass$($END$) = _$DataClass$;&#10;}" description="Freezed Data Class" toReformat="false" toShortenFQNames="true">
    <variable name="DataClass" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="frzunion" value="@immutable&#10;abstract class $Union$ with _$$$Union$ {&#10;  const factory $Union$.$Case$($END$) = _$CaseUpper$;&#10;}" description="Freezed Union" toReformat="false" toShortenFQNames="true">
    <variable name="Union" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Case" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CaseUpper" expression="capitalize(Case)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="frzunioncase" value="const factory $Union$.$Case$($END$) = _$CaseUpper$;" description="Freezed Union Case" toReformat="false" toShortenFQNames="true">
    <variable name="Union" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Case" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CaseUpper" expression="capitalize(Case)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="frzfromjson" value="factory $DataClass$.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$$$DataClass$FromJson(json);" description="fromJson" toReformat="false" toShortenFQNames="true">
    <variable name="DataClass" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="switchcase" value="switch($var$) {&#10;  case $case$:&#10;    $action$&#10;    break;&#10;  default:&#10;}&#10;  " description="Dart switch statement" toReformat="false" toShortenFQNames="true">
    <variable name="var" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="case" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="action" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="firfreezed" value="import 'package:firestore_ref/firestore_ref.dart';&#10;import 'package:flutter/foundation.dart';&#10;import 'package:freezed_annotation/freezed_annotation.dart';&#10;import 'package:json_annotation/json_annotation.dart';&#10;&#10;part '$ENTITY_SNAKE$.freezed.dart';&#10;part '$ENTITY_SNAKE$.g.dart';&#10;&#10;@freezed&#10;abstract class $ENTITY$ with _$$$ENTITY$ {&#10;  const factory $ENTITY$({&#10;    $END$,&#10;  }) = _$ENTITY$;&#10;  factory $ENTITY$.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$$$ENTITY$FromJson(json);&#10;}&#10;&#10;final CollectionRef&lt;$ENTITY$, Document&lt;$ENTITY$&gt;&gt; $ENTITY_SNAKE$sRef = CollectionRef(&#10;  Firestore.instance.collection('$ENTITY_SNAKE$s'),&#10;  decoder: (snapshot) =&gt; Document(&#10;    snapshot.documentID,&#10;    $ENTITY$.fromJson(snapshot.data),&#10;  ),&#10;  encoder: ($ENTITY_SNAKE$) =&gt; $ENTITY_SNAKE$.toJson(),&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <variable name="ENTITY" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_SNAKE" expression="snakeCase(ENTITY)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="firfreezedtimestamp" value="import 'package:firestore_ref/firestore_ref.dart';&#10;import 'package:flutter/foundation.dart';&#10;import 'package:freezed_annotation/freezed_annotation.dart';&#10;import 'package:json_annotation/json_annotation.dart';&#10;&#10;part '$ENTITY_SNAKE$.freezed.dart';&#10;part '$ENTITY_SNAKE$.g.dart';&#10;&#10;@freezed&#10;abstract class $ENTITY$ with _$$$ENTITY$ {&#10;  const factory $ENTITY$({&#10;    $END$,&#10;    @timestampJsonKey DateTime createdAt,&#10;    @timestampJsonKey DateTime updatedAt,&#10;  }) = _$ENTITY$;&#10;  factory $ENTITY$.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$$$ENTITY$FromJson(json);&#10;}&#10;&#10;final CollectionRef&lt;$ENTITY$, Document&lt;$ENTITY$&gt;&gt; $ENTITY_SNAKE$sRef = CollectionRef(&#10;  Firestore.instance.collection('$ENTITY_SNAKE$s'),&#10;  decoder: (snapshot) =&gt; Document(&#10;    snapshot.documentID,&#10;    $ENTITY$.fromJson(snapshot.data),&#10;  ),&#10;  encoder: ($ENTITY_SNAKE$) =&gt; replacingTimestamp(&#10;    json: $ENTITY_SNAKE$.toJson(),&#10;    createdAt: $ENTITY_SNAKE$.createdAt,&#10;  ),&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <variable name="ENTITY" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_SNAKE" expression="snakeCase(ENTITY)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="firfreezedcmpl" value="import 'package:firestore_ref/firestore_ref.dart';&#10;import 'package:flutter/foundation.dart';&#10;import 'package:freezed_annotation/freezed_annotation.dart';&#10;import 'package:json_annotation/json_annotation.dart';&#10;&#10;part '$EntitySnake$.freezed.dart';&#10;part '$EntitySnake$.g.dart';&#10;&#10;@freezed&#10;abstract class $Entity$ with _$$$Entity$ {&#10;  const factory $Entity$({&#10;    $END$,&#10;  }) = _$Entity$;&#10;  factory $Entity$.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$$$Entity$FromJson(json);&#10;}&#10;&#10;class $Entity$Doc extends Document&lt;$Entity$&gt; {&#10;  const $Entity$Doc(String id, $Entity$ entity) : super(id, entity);&#10;}&#10;&#10;class $Entity$sRef extends CollectionRef&lt;$Entity$, $Entity$Doc&gt; {&#10;  $Entity$sRef()&#10;      : super(&#10;          Firestore.instance.collection('$EntitySnake$s'),&#10;          decoder: (snapshot) =&gt; $Entity$Doc(&#10;            snapshot.documentID,&#10;            $Entity$.fromJson(snapshot.data),&#10;          ),&#10;          encoder: ($EntitySnake$) =&gt; $EntitySnake$.toJson(),&#10;        );&#10;&#10;  @override&#10;  $Entity$Ref docRef([String id]) {&#10;    return $Entity$Ref(&#10;      id: id,&#10;      collectionRef: this,&#10;    );&#10;  }&#10;}&#10;&#10;class $Entity$Ref extends DocumentRef&lt;$Entity$, $Entity$Doc&gt; {&#10;  $Entity$Ref({&#10;    @required String id,&#10;    @required $Entity$sRef collectionRef,&#10;  }) : super(&#10;          id: id,&#10;          collectionRef: collectionRef,&#10;        );&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Entity" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="EntitySnake" expression="snakeCase(Entity)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
</templateSet>